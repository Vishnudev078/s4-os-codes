//server//
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>

#define packetCount 10

typedef struct Packet {
int id;
int received;
} Packet;

Packet packets[packetCount];

void main() {
for (int i = 0; i < packetCount; ++i) {
packets[i].id = i;
packets[i].received = 0;
}

char *ip = "127.0.0.100";
int port = 5567;
srand(time(0));

int sockfd;
struct sockaddr_in server_addr, client_addr;
char buffer[1024];
socklen_t addr_size;
int n;

sockfd = socket(AF_INET, SOCK_DGRAM, 0);
if (sockfd < 0) {
perror("[-]Socket error");
exit(1);
}

memset(&server_addr, 0, sizeof(server_addr));
server_addr.sin_family = AF_INET;
server_addr.sin_port = htons(port);
server_addr.sin_addr.s_addr = inet_addr(ip);

n = bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr));
if (n < 0) {
perror("[-]Bind error");
exit(1);
}

while (1) {
bzero(buffer, 1024);
addr_size = sizeof(client_addr);
recvfrom(sockfd, buffer, 1024, 0, (struct sockaddr *)&client_addr, &addr_size);

int packet = atoi(buffer);
if (packets[packet].received == 1 || rand() % 5 == 0)
continue;

if (rand() % 4 == 0) {
printf("Server: Received corrupted packet %s. Sending negative acknowledgment\n", buffer);
sprintf(buffer, "NAK %d", packet);
sendto(sockfd, buffer, 1024, 0, (struct sockaddr *)&client_addr, sizeof(client_addr));
}
else {
printf("Server: Received packet %s. Sending acknowledgment\n", buffer);
sprintf(buffer, "ACK %d", packet);
sendto(sockfd, buffer, 1024, 0, (struct sockaddr *)&client_addr, sizeof(client_addr));
packets[packet].received = 1;
}
}
}

//client//
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define timeoutValue 5
#define packetCount 10
#define windowSize 3

typedef struct Packet {
    int id;
    int sent;
} Packet;

Packet packets[packetCount];
pthread_t thread[packetCount], receiveThread;

int sockfd;
struct sockaddr_in addr;
int windowStart, windowEnd;
int port = 5567;
char *ip = "127.0.0.1";

void *sendPacket(void *arg) {
    Packet *packet = (Packet *)arg;
    char buffer[1024];

    while (packet->sent == 0) {
        printf("Client: Sending packet %d\n", packet->id);
        memset(buffer, 0, sizeof(buffer));
        sprintf(buffer, "%d", packet->id);

        sendto(sockfd, buffer, 1024, 0, (struct sockaddr *)&addr, sizeof(addr));
        sleep(timeoutValue);

        if (packet->sent == 0)
            printf("Client: Timeout for packet %d\n", packet->id);
    }

    return NULL;
}

void *receivePacket(void *arg) {
    socklen_t addr_size = sizeof(addr);
    char buffer[1024];

    while (1) {
        memset(buffer, 0, sizeof(buffer));
        recvfrom(sockfd, buffer, 1024, 0, (struct sockaddr *)&addr, &addr_size);

        char msg[20];
        int packetID;
        sscanf(buffer, "%s %d", msg, &packetID);

        if (strcmp(msg, "NAK") == 0) {
            printf("Client: Received NAK for packet %d, resending...\n", packetID);
            pthread_cancel(thread[packetID]);
            pthread_create(&thread[packetID], NULL, sendPacket, (void *)&packets[packetID]);
        } else if (strcmp(msg, "ACK") == 0) {
            printf("Client: Received ACK for packet %d\n", packetID);
            packets[packetID].sent = 1;
        }
    }

    return NULL;
}

int main() {
    for (int i = 0; i < packetCount; i++) {
        packets[i].id = i;
        packets[i].sent = 0;
    }

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket error");
        exit(EXIT_FAILURE);
    }

    memset(&addr, 0, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_port = htons(port);
    addr.sin_addr.s_addr = inet_addr(ip);

    pthread_create(&receiveThread, NULL, receivePacket, NULL);

    windowStart = 0;
    windowEnd = windowStart + windowSize - 1;

    for (int i = windowStart; i <= windowEnd; ++i) {
        pthread_create(&thread[i], NULL, sendPacket, (void *)&packets[i]);
    }

    for (int i = windowStart; i <= windowEnd; ++i) {
        pthread_join(thread[i], NULL);
    }

    pthread_join(receiveThread, NULL);
    close(sockfd);

    return 0;
}
